{"version":3,"sources":["ng://angular-page-visibility/lib/angular-page-visibility.state.enum.ts","ng://angular-page-visibility/lib/angular-page-visibility.service.ts","ng://angular-page-visibility/lib/angular-page-visibility.decorators.ts","ng://angular-page-visibility/lib/angular-page-visibility.module.ts"],"names":["VISIBLE","HIDDEN","PRERENDER","UNLOADED","HiddenKeyConstant","DEFAULT","MS","WEB_KIT","VisibilityStatusConstant","AngularPageVisibilityService","this","onPageVisibleSource","Subject","onPageHiddenSource","onPagePrerenderSource","onPageUnloadedSource","onPageVisibilityChangeSource","$onPageVisible","asObservable","$onPageHidden","$onPagePrerender","$onPageUnloaded","$onPageVisibilityChange","addEventListenerVibilityChange","prototype","isPageVisible","getVisibilityState","isHidden","isPageHidden","isPagePrerender","isPageUnloaded","document","hidden","visibilityState","defineBrowserSupport","visibilityChange","_this","addEventListener","next","AngularPageVisibilityStateEnum","Injectable","args","providedIn","providers","pageVisibilityService","ReflectiveInjector","resolveAndCreate","get","AngularPageVisibilityModule","NgModule","imports","declarations","exports","target","propertyKey","descriptor","onPageHiddenSubscription","originalMethod","value","originalNgOnInit","ngOnInit","_i","arguments","length","subscribe","call","originalNgOnDestroy","ngOnDestroy","unsubscribe","onPagePrerenderSubscription","onPageUnloadedSubscription","onPageVisibleSubscription"],"mappings":"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","sourcesContent":["export enum AngularPageVisibilityStateEnum {\n  VISIBLE,\n  HIDDEN,\n  PRERENDER,\n  UNLOADED\n}\n","import { Injectable } from \"@angular/core\";\nimport { Observable, Subject } from \"rxjs\";\nimport { AngularPageVisibilityStateEnum } from \"./angular-page-visibility.state.enum\";\n\nclass HiddenKeyConstant {\n  static DEFAULT = \"hidden\";\n  static MS = \"msHidden\";\n  static WEB_KIT = \"webkitHidden\";\n}\n\nclass VisibilityStatusConstant {\n  static VISIBLE = \"visible\";\n  static HIDDEN = \"hidden\";\n  static PRERENDER = \"prerender\";\n  static UNLOADED = \"unloaded\";\n}\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class AngularPageVisibilityService {\n  private onPageVisibleSource: Subject<void> = new Subject<void>();\n  private onPageHiddenSource: Subject<void> = new Subject<void>();\n  private onPagePrerenderSource: Subject<void> = new Subject<void>();\n  private onPageUnloadedSource: Subject<void> = new Subject<void>();\n  private onPageVisibilityChangeSource: Subject<\n    AngularPageVisibilityStateEnum\n  > = new Subject<AngularPageVisibilityStateEnum>();\n  private hidden: string;\n  private visibilityChange: string;\n  private visibilityState: string;\n  private document: Document;\n  $onPageVisible: Observable<void> = this.onPageVisibleSource.asObservable();\n  $onPageHidden: Observable<void> = this.onPageHiddenSource.asObservable();\n  $onPagePrerender: Observable<\n    void\n  > = this.onPagePrerenderSource.asObservable();\n  $onPageUnloaded: Observable<void> = this.onPageUnloadedSource.asObservable();\n  $onPageVisibilityChange: Observable<\n    AngularPageVisibilityStateEnum\n  > = this.onPageVisibilityChangeSource.asObservable();\n\n  constructor() {\n    this.addEventListenerVibilityChange();\n  }\n\n  isPageVisible(): boolean {\n    return (\n      VisibilityStatusConstant.VISIBLE === this.getVisibilityState() ||\n      !this.isHidden()\n    );\n  }\n\n  isPageHidden(): boolean {\n    return (\n      VisibilityStatusConstant.HIDDEN === this.getVisibilityState() ||\n      this.isHidden()\n    );\n  }\n\n  isPagePrerender(): boolean {\n    return VisibilityStatusConstant.PRERENDER === this.getVisibilityState();\n  }\n\n  isPageUnloaded(): boolean {\n    return VisibilityStatusConstant.UNLOADED === this.getVisibilityState();\n  }\n\n  private isHidden(): boolean {\n    return document[this.hidden];\n  }\n\n  private getVisibilityState(): string {\n    return document[this.visibilityState];\n  }\n\n  private defineBrowserSupport() {\n    if (typeof document[HiddenKeyConstant.DEFAULT] !== \"undefined\") {\n      // Opera 12.10 and Firefox 18 and later support\n      this.hidden = HiddenKeyConstant.DEFAULT;\n      this.visibilityChange = \"visibilitychange\";\n      this.visibilityState = \"visibilityState\";\n    } else if (typeof document[HiddenKeyConstant.MS] !== \"undefined\") {\n      this.hidden = HiddenKeyConstant.MS;\n      this.visibilityChange = \"msvisibilitychange\";\n      this.visibilityState = \"msVisibilityState\";\n    } else if (typeof document[HiddenKeyConstant.WEB_KIT] !== \"undefined\") {\n      this.hidden = HiddenKeyConstant.WEB_KIT;\n      this.visibilityChange = \"webkitvisibilitychange\";\n      this.visibilityState = \"webkitVisibilityState\";\n    }\n  }\n\n  private addEventListenerVibilityChange(): void {\n    this.defineBrowserSupport();\n    document.addEventListener(\n      this.visibilityChange,\n      () => {\n        const vibilityState = this.getVisibilityState();\n        switch (vibilityState) {\n          case VisibilityStatusConstant.VISIBLE:\n            this.onPageVisibilityChangeSource.next(\n              AngularPageVisibilityStateEnum.VISIBLE\n            );\n            this.onPageVisibleSource.next();\n            break;\n          case VisibilityStatusConstant.HIDDEN:\n            this.onPageVisibilityChangeSource.next(\n              AngularPageVisibilityStateEnum.HIDDEN\n            );\n            this.onPageHiddenSource.next();\n            break;\n          case VisibilityStatusConstant.PRERENDER:\n            this.onPageVisibilityChangeSource.next(\n              AngularPageVisibilityStateEnum.PRERENDER\n            );\n            this.onPagePrerenderSource.next();\n            break;\n          case VisibilityStatusConstant.UNLOADED:\n            this.onPageVisibilityChangeSource.next(\n              AngularPageVisibilityStateEnum.UNLOADED\n            );\n            this.onPageUnloadedSource.next();\n            break;\n          default:\n            if (this.isHidden()) {\n              this.onPageVisibilityChangeSource.next(\n                AngularPageVisibilityStateEnum.HIDDEN\n              );\n              this.onPageHiddenSource.next();\n            } else {\n              this.onPageVisibilityChangeSource.next(\n                AngularPageVisibilityStateEnum.VISIBLE\n              );\n              this.onPageVisibleSource.next();\n            }\n        }\n      },\n      false\n    );\n  }\n}\n","import { Provider, ReflectiveInjector } from '@angular/core';\nimport { AngularPageVisibilityService } from './angular-page-visibility.service';\nimport { AngularPageVisibilityStateEnum } from './angular-page-visibility.state.enum';\nimport { Subscription } from 'rxjs';\n\nconst providers: Provider[] = [ AngularPageVisibilityService ];\nconst injector = ReflectiveInjector.resolveAndCreate( providers );\nconst pageVisibilityService = injector.get( AngularPageVisibilityService );\n\nexport function OnPageVisibilityChange (): MethodDecorator {\n  return function ( target: any , propertyKey: string , descriptor: PropertyDescriptor ) {\n    const originalMethod = descriptor.value;\n    const originalNgOnInit = target.ngOnInit;\n    let onPageHiddenSubscription: Subscription;\n    target.ngOnInit = function(...args) {\n      onPageHiddenSubscription = pageVisibilityService.$onPageVisibilityChange\n      .subscribe( ( visibilityState: AngularPageVisibilityStateEnum ) => originalMethod.call(this, [ visibilityState ]));\n      if (originalNgOnInit) {\n        originalNgOnInit.call(this, args);\n      }\n    };\n    const originalNgOnDestroy = target.ngOnDestroy;\n    target.ngOnDestroy = function(...args) {\n      onPageHiddenSubscription.unsubscribe();\n      if (originalNgOnDestroy) {\n        originalNgOnDestroy.call(this, args);\n      }\n    };\n  };\n}\n\nexport function OnPageHidden (): MethodDecorator {\n  return function ( target: any , propertyKey: string , descriptor: PropertyDescriptor ) {\n    const originalMethod = descriptor.value;\n    const originalNgOnInit = target.ngOnInit;\n    let onPageHiddenSubscription: Subscription;\n    target.ngOnInit = function(...args) {\n      onPageHiddenSubscription = pageVisibilityService.$onPageHidden.subscribe(() => originalMethod.call(this));\n      if (originalNgOnInit) {\n        originalNgOnInit.call(this, args);\n      }\n    };\n    const originalNgOnDestroy = target.ngOnDestroy;\n    target.ngOnDestroy = function(...args) {\n      onPageHiddenSubscription.unsubscribe();\n      if (originalNgOnDestroy) {\n        originalNgOnDestroy.call(this, args);\n      }\n    };\n  };\n}\n\nexport function OnPageVisible (): MethodDecorator {\n  return function ( target: any , propertyKey: string , descriptor: PropertyDescriptor ) {\n    const originalMethod = descriptor.value;\n    const originalNgOnInit = target.ngOnInit;\n    let onPageVisibleSubscription: Subscription;\n    target.ngOnInit = function(...args) {\n      onPageVisibleSubscription = pageVisibilityService.$onPageVisible.subscribe(() => originalMethod.call(this));\n      if (originalNgOnInit) {\n        originalNgOnInit.call(this, args);\n      }\n    };\n    const originalNgOnDestroy = target.ngOnDestroy;\n    target.ngOnDestroy = function(...args) {\n      onPageVisibleSubscription.unsubscribe();\n      if (originalNgOnDestroy) {\n        originalNgOnDestroy.call(this, args);\n      }\n    };\n  };\n}\n\nexport function OnPagePrerender (): MethodDecorator {\n  return function ( target: any , propertyKey: string , descriptor: PropertyDescriptor ) {\n    const originalMethod = descriptor.value;\n    const originalNgOnInit = target.ngOnInit;\n    let onPagePrerenderSubscription: Subscription;\n    target.ngOnInit = function(...args) {\n      onPagePrerenderSubscription = pageVisibilityService.$onPagePrerender.subscribe(() => originalMethod.call(this));\n      if (originalNgOnInit) {\n        originalNgOnInit.call(this, args);\n      }\n    };\n    const originalNgOnDestroy = target.ngOnDestroy;\n    target.ngOnDestroy = function(...args) {\n      onPagePrerenderSubscription.unsubscribe();\n      if (originalNgOnDestroy) {\n        originalNgOnDestroy.call(this, args);\n      }\n    };\n  };\n}\n\nexport function OnPageUnloaded (): MethodDecorator {\n  return function ( target: any , propertyKey: string , descriptor: PropertyDescriptor ) {\n    const originalMethod = descriptor.value;\n    const originalNgOnInit = target.ngOnInit;\n    let onPageUnloadedSubscription: Subscription;\n    target.ngOnInit = function(...args) {\n      onPageUnloadedSubscription = pageVisibilityService.$onPageUnloaded.subscribe(() => originalMethod.call(this));\n      if (originalNgOnInit) {\n        originalNgOnInit.call(this, args);\n      }\n    };\n    const originalNgOnDestroy = target.ngOnDestroy;\n    target.ngOnDestroy = function(...args) {\n      onPageUnloadedSubscription.unsubscribe();\n      if (originalNgOnDestroy) {\n        originalNgOnDestroy.call(this, args);\n      }\n    };\n  };\n}\n","import { NgModule } from '@angular/core';\nimport { AngularPageVisibilityService } from './angular-page-visibility.service';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  providers: [AngularPageVisibilityService],\n  exports: []\n})\nexport class AngularPageVisibilityModule { }\n"]}